use alloc::boxed::Box;
use core::task::{Context, Poll};
use core::{future::Future, pin::Pin};

pub mod simple_executor;

// The Task struct is a newtype wrapper around a pinned, heap allocated,
// and dynamically dispatched future with the empty type () as output.
// The dyn keyword indicates that we store a trait object in the Box.
// This means that the methods on the future are dynamically dispatched,
// which makes it possible to store different types of futures in the Task type.
// The Pin<Box> type ensures that a value cannot be moved in memory by placing it
// on the heap and preventing the creation of &mut references to it.
// This is important because futures generated by async/await might be self-referential,
// i.e. contain pointers to itself that would be invalidated when the future is moved.
pub struct Task {
    future: Pin<Box<dyn Future<Output = ()>>>,
}

impl Task {
    // The function takes an arbitrary future with output type () and pins it in memory
    // through the Box::pin function. Then it wraps the boxed future in the Task struct
    // and returns it. The 'static lifetime is required here because the returned Task
    // can live for an arbitrary time, so the future needs to be valid for that time too.
    pub fn new(future: impl Future<Output = ()> + 'static) -> Task {
        Task {
            future: Box::pin(future),
        }
    }

    // Since the poll method of the Future trait expects to be called on a Pin<&mut T> type,
    // we use the Pin::as_mut method to convert the self.future field of type Pin<Box<T>> first.
    // Then we call poll on the converted self.future field and return the result.
    // Since the Task::poll method should be only called by the executor,
    // we keep the function private to the task module.
    fn poll(&mut self, context: &mut Context) -> Poll<()> {
        self.future.as_mut().poll(context)
    }
}
